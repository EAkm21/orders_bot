from aiogram.filters import Command
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
import os

load_dotenv()
logging.basicConfig(level=logging.DEBUG)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ADMIN_ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ .env

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=MemoryStorage())

class OrderState(StatesGroup):
    waiting_for_task = State()
    waiting_for_deadline = State()

@dp.message(Command(commands=['start']))
async def command_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")],
        ],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MyPoints! –ß–µ–º –º–æ–∂–µ–º –í–∞–º –ø–æ–º–æ—á—å?", reply_markup=keyboard)

@dp.message(Command(commands=['rate']))
async def process_review(message: types.Message):
     await message.answer("–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –í–∞—à –æ—Ç–∑—ã–≤.")

@dp.message(Command(commands=['help']))
async def process_help(message: types.Message):

       await message.answer("üìú –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:\n"
                            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç\n"
                            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n"
                            "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã\n"
                            "4Ô∏è‚É£ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
                            "5Ô∏è‚É£ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.")

@dp.message(Command(commands=['price']))
async def price_list(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –†–µ—Ñ–µ—Ä–∞—Ç", callback_data='ref')],
        [InlineKeyboardButton(text="üìù –≠—Å—Å–µ", callback_data='es')],
        [InlineKeyboardButton(text="üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", callback_data='pres')],
        [InlineKeyboardButton(text="üìö –ö—É—Ä—Å–æ–≤–∞—è", callback_data='course')],
        [InlineKeyboardButton(text='üìö –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è | üìë –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è | üéì –≠–∫–∑–∞–º–µ–Ω', callback_data='sm')]
    ])
    await message.answer("–ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç —É—Å–ª—É–≥.", reply_markup=keyboard)

@dp.callback_query()
async def prices_callback(callback: CallbackQuery, state: FSMContext):
    if callback.data not in ['ref', 'es', 'pres', 'course', 'sm']:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–ª–±—ç–∫ —Å —Ü–µ–Ω–∞–º–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return
    user_data = await state.get_data()
    last_message_id = user_data.get("last_message_id")  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if last_message_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=last_message_id)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    message = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥ —É—Å–ª–æ–≤–∏—è–º–∏

    price_texts = {
        'ref': "üìñ *–†–µ—Ñ–µ—Ä–∞—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑*\n\n"
               "‚úÖ *–†–µ—Ñ–µ—Ä–∞—Ç –æ—Ç 8 –¥–Ω–µ–π* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *2500 —Ä—É–±*\n"
               "‚úÖ *–†–µ—Ñ–µ—Ä–∞—Ç –æ—Ç 4-7 –¥–Ω–µ–π* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *3000 —Ä—É–±*\n"
               "‚úÖ *–†–µ—Ñ–µ—Ä–∞—Ç –æ—Ç 1-3 –¥–Ω–µ–π* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *4000 —Ä—É–±*\n"
               "üî• *–≠–∫—Å–ø—Ä–µ—Å—Å (1 –¥–µ–Ω—å)* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *6000 —Ä—É–±*\n\n"
               "üìä *–†–µ—Ñ–µ—Ä–∞—Ç + –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è*:\n"
               "   - –æ—Ç 8 –¥–Ω–µ–π ‚Äî üí∞ *3000 —Ä—É–±*\n"
               "   - –æ—Ç 4-7 –¥–Ω–µ–π ‚Äî üí∞ *3700 —Ä—É–±*\n"
               "   - –æ—Ç 1-3 –¥–Ω–µ–π ‚Äî üí∞ *5000 —Ä—É–±*\n"
               "   - üöÄ *–≠–∫—Å–ø—Ä–µ—Å—Å (1 –¥–µ–Ω—å)* ‚Äî üí∞ *7000 —Ä—É–±*\n",

        'es': "üìù *–≠—Å—Å–µ –Ω–∞ –∑–∞–∫–∞–∑*\n\n"
              "‚úÖ *–≠—Å—Å–µ –æ—Ç 8 –¥–Ω–µ–π* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *1250 —Ä—É–±*\n"
              "‚úÖ *–≠—Å—Å–µ –æ—Ç 4-7 –¥–Ω–µ–π* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *1500 —Ä—É–±*\n"
              "‚úÖ *–≠—Å—Å–µ –æ—Ç 1-3 –¥–Ω–µ–π* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *2000 —Ä—É–±*\n"
              "üî• *–≠–∫—Å–ø—Ä–µ—Å—Å (1 –¥–µ–Ω—å)* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *2500 —Ä—É–±*\n",

        'pres': "üìä *–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –∑–∞–∫–∞–∑*\n\n"
                "üé® *–û–±—ä–µ–º: 5-10 —Å–ª–∞–π–¥–æ–≤*:\n"
                "   - –æ—Ç 8 –¥–Ω–µ–π ‚Äî üí∞ *500 —Ä—É–±*\n"
                "   - –æ—Ç 4-7 –¥–Ω–µ–π ‚Äî üí∞ *700 —Ä—É–±*\n"
                "   - –æ—Ç 1-3 –¥–Ω–µ–π ‚Äî üí∞ *1000 —Ä—É–±*\n"
                "   - üöÄ *–≠–∫—Å–ø—Ä–µ—Å—Å (1 –¥–µ–Ω—å)* ‚Äî üí∞ *2000 —Ä—É–±*\n",

        'course': "üìö *–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã*\n\n"
                  "‚úÖ *–û—Ç 15 –¥–Ω–µ–π* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *5000 —Ä—É–±*\n"
                  "‚úÖ *–û—Ç 5-14 –¥–Ω–µ–π* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *6500 —Ä—É–±*\n"
                  "‚úÖ *–û—Ç 1-4 –¥–Ω–µ–π* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *9000 —Ä—É–±*\n"
                  "üî• *–≠–∫—Å–ø—Ä–µ—Å—Å (1 –¥–µ–Ω—å)* ‚Äî _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60%_ ‚Äî üí∞ *15000 —Ä—É–±*\n",

        'sm': "‚ö° *–°—Ä–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã*\n\n"
              "‚úç –î–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –¥–µ–Ω—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º."
    }

    if callback.data in price_texts:
        message = await callback.message.answer(price_texts[callback.data])

    if message:
        await state.update_data(last_message_id=message.message_id)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    await callback.answer()

@dp.message(StateFilter(None))
async def process_choose_university(message: types.Message, state: FSMContext):
    if message.text == "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="REU", callback_data="reu_btn")],
            [InlineKeyboardButton(text="HSE", callback_data="hse_btn")],
            [InlineKeyboardButton(text="MSU", callback_data="msu_btn")]
        ])
        await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:", reply_markup=keyboard)
    await state.set_state(OrderState.waiting_for_task)

@dp.callback_query(lambda c: c.data in ['reu_btn', 'hse_btn', 'msu_btn'])
async def process_callback(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω callback: {data}")
    if data in ["reu_btn", "hse_btn", "msu_btn"]:
        kkeyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–®–≠–∏–ë", callback_data=f"{data}_economy")],
            [InlineKeyboardButton(text="–í–®–ö–ú–∏–°, –§–æ—Ä—Å–∞–π—Ç", callback_data=f"{data}_cs")],
            [InlineKeyboardButton(text="–í–®–°–ì–ù", callback_data=f"{data}_sgn")],
            [InlineKeyboardButton(text="–í–®–ü", callback_data=f"{data}_pr")],
            [InlineKeyboardButton(text="–í–®–§", callback_data=f"{data}_fin")],
            [InlineKeyboardButton(text="–í–®–ú", callback_data=f"{data}_men")],
            [InlineKeyboardButton(text="–í–®–ö–ò", callback_data=f"{data}_ind")],
            [InlineKeyboardButton(text='–í–ò–®"–ù–ú–∏–¢"', callback_data=f"{data}_tech")],
            [InlineKeyboardButton(text="–ò–ü–ê–ú", callback_data=f"{data}_med")],
            [InlineKeyboardButton(text="–ö–∞–ø–∏—Ç–∞–Ω—ã", callback_data=f"{data}_cap")]
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:", reply_markup=keyboard)

    elif (data.endswith("_economy") or data.endswith("_cs") or data.endswith("_sgn") or data.endswith("_pr")
          or data.endswith("_fin") or data.endswith("_men") or data.endswith("_ind") or data.endswith("_tech")
          or data.endswith("_med") or data.endswith("_cap")):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data=f"{data}_math")],
            [InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"{data}_prog")],
            [InlineKeyboardButton(text="–ü—Ä–æ—á–µ–µ", callback_data=f"{data}_other")]
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=keyboard)

    elif data.endswith("_math") or data.endswith("_prog") or data.endswith("_other"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–≠—Å—Å–µ", callback_data=f"{data}_essay")],
            [InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞—Ç", callback_data=f"{data}_report")],
            [InlineKeyboardButton(text="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", callback_data=f"{data}_presentation")],
            [InlineKeyboardButton(text="–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", callback_data=f"{data}_independ")],
            [InlineKeyboardButton(text="–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", callback_data=f"{data}_course")]
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:", reply_markup=keyboard)

    elif any(data.endswith(suffix) for suffix in ["_essay", "_report", "_presentation", "_independ", "_course"]):
        await state.set_state(OrderState.waiting_for_task)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")


@dp.message(OrderState.waiting_for_task)
async def process_task_description(message: types.Message, state: FSMContext):
    await state.update_data(task=message.text)
    await state.set_state(OrderState.waiting_for_deadline)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")


@dp.message(OrderState.waiting_for_deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    deadline = message.text
    user = message.from_user
    order_text = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username})\n"
        f"üìÑ –ó–∞–¥–∞–Ω–∏–µ: {user_data['task']}\n"
        f"üìÜ –î–µ–¥–ª–∞–π–Ω: {deadline}"
    )
    await bot.send_message(ADMIN_ID, order_text)
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")
    await state.clear()

if __name__ == "__main__":
    dp.run_polling(bot)

