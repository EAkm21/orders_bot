from aiogram.filters import Command
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
import os

load_dotenv()
logging.basicConfig(level=logging.DEBUG)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ADMIN_ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ .env

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=MemoryStorage())

class OrderState(StatesGroup):
    waiting_for_task = State()
    waiting_for_deadline = State()

@dp.message(Command(commands=['start']))
async def command_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í—ã–±–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞")],
            [KeyboardButton(text="–û—Ç–∑—ã–≤—ã")],
            [KeyboardButton(text="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MyPoints! –ß–µ–º –º–æ–∂–µ–º –í–∞–º –ø–æ–º–æ—á—å?", reply_markup=keyboard)

@dp.message()
async def process_choose_university(message: types.Message):
    if message.text == "–í—ã–±–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="REU", callback_data="reu_btn")],
            [InlineKeyboardButton(text="HSE", callback_data="hse_btn")],
            [InlineKeyboardButton(text="MSU", callback_data="msu_btn")]
        ])
        await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:", reply_markup=keyboard)

@dp.callback_query()
async def process_callback(callback: CallbackQuery, state: FSMContext):
    data = callback.data

    if data in ["reu_btn", "hse_btn", "msu_btn"]:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data=f"{data}_economy")],
            [InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", callback_data=f"{data}_cs")],
            [InlineKeyboardButton(text="–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è", callback_data=f"{data}_law")]
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:", reply_markup=keyboard)

    elif data.endswith("_economy") or data.endswith("_cs") or data.endswith("_law"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data=f"{data}_math")],
            [InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"{data}_prog")],
            [InlineKeyboardButton(text="–§–∏–ª–æ—Å–æ—Ñ–∏—è", callback_data=f"{data}_philo")]
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=keyboard)

    elif data.endswith("_math") or data.endswith("_prog") or data.endswith("_philo"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–≠—Å—Å–µ", callback_data=f"{data}_essay")],
            [InlineKeyboardButton(text="–î–æ–∫–ª–∞–¥", callback_data=f"{data}_report")],
            [InlineKeyboardButton(text="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", callback_data=f"{data}_presentation")],
            [InlineKeyboardButton(text="–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞", callback_data=f"{data}_homework")],
            [InlineKeyboardButton(text="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è", callback_data=f"{data}_lab")]
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:", reply_markup=keyboard)

    elif any(data.endswith(suffix) for suffix in ["_essay", "_report", "_presentation", "_homework", "_lab"]):
        await state.set_state(OrderState.waiting_for_task)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")

@dp.message(OrderState.waiting_for_task)
async def process_task_description(message: types.Message, state: FSMContext):
    await state.update_data(task=message.text)
    await state.set_state(OrderState.waiting_for_deadline)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")


@dp.message(OrderState.waiting_for_deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    deadline = message.text
    user = message.from_user
    order_text = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username})\n"
        f"üìÑ –ó–∞–¥–∞–Ω–∏–µ: {user_data['task']}\n"
        f"üìÜ –î–µ–¥–ª–∞–π–Ω: {deadline}"
    )
    await bot.send_message(ADMIN_ID, order_text)
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")
    await state.clear()

@dp.message()
async def process_review(message: types.Message):
    if message.text == "–û—Ç–∑—ã–≤—ã":
        await message.answer("–í–æ—Ç –æ–¥–∏–Ω –∏–∑ –æ—Ç–∑—ã–≤–æ–≤: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –ø–æ–º–æ–≥ —Å –≤—ã–±–æ—Ä–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞!'")

@dp.message()
async def process_help(message: types.Message):
    if message.text == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer("üìú –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:\n"
                             "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç\n"
                             "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n"
                             "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã\n"
                             "4Ô∏è‚É£ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
                             "5Ô∏è‚É£ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.")

if __name__ == "__main__":
    dp.run_polling(bot)

